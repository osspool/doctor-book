'use client';

import { useState, useCallback } from 'react';
import { useTodayAppointments, useAppointmentActions } from '@/hooks/useAppointments';
import { useSupabaseRealtime } from '@/hooks/useSupabaseRealtime';
import { formatDate, formatTime } from './utils';
import Modal from './Modal';
import AppointmentForm from './AppointmentForm';

export default function AppointmentSection() {
  const [message, setMessage] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingAppointment, setEditingAppointment] = useState(null);

  // Clinic hours and closed day
  const clinicHoursMorning = { start: 10, end: 13 }; // 10 AM to 1 PM
  const clinicHoursEvening = { start: 17, end: 21 }; // 5 PM to 9 PM
  const closedDay = 2; // Tuesday (0=Sunday, 1=Monday, ..., 6=Saturday)

  // Use hooks
  const { appointments, isLoading, error } = useTodayAppointments();
  const { 
    createAppointment, 
    updateAppointment, 
    deleteAppointment,
    isCreating,
    isUpdating,
    isDeleting
  } = useAppointmentActions();

  // Real-time updates (handled in the hook)
  useSupabaseRealtime('appointments', useCallback(() => {
    // Real-time invalidation is handled in the hooks
  }, []));

  const handleEdit = (appointment) => {
    setEditingAppointment(appointment);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setEditingAppointment(null);
    setMessage('');
  };

  const handleDelete = async (id) => {
    if (confirm('‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶Ø‡ßá ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶®?')) {
      try {
        await deleteAppointment(id);
        setMessage('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§');
      } catch (error) {
        setMessage('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§');
      }
    }
  };

  const handleFormSubmit = async (formData) => {
    try {
      if (editingAppointment) {
        // Update existing appointment (from modal)
        await updateAppointment({ id: editingAppointment.id, data: formData });
        setMessage('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
        handleCloseModal();
      } else {
        // Create new appointment (from main form)
        await createAppointment(formData);
        setMessage('‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!');
        // Don't close modal since this is the main form
      }
    } catch (error) {
      setMessage(editingAppointment ? '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§' : '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§');
    }
  };

      return (
    <div className="p-4">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b pb-3">‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü</h2>
      
      {/* Create Form - Always Visible */}
      <div className="bg-blue-50 p-6 rounded-lg shadow-inner mb-8">
        <AppointmentForm
          appointment={null}
          onSubmit={handleFormSubmit}
          onCancel={() => setMessage('')}
          isLoading={isCreating}
        />
      </div>

      {message && (
        <div className="mb-4 p-3 bg-blue-100 text-blue-800 rounded-md">
          {message}
        </div>
      )}

      <h2 className="text-3xl font-bold text-gray-800 mt-10 mb-6 border-b pb-3">‡¶Ü‡¶∏‡¶®‡ßç‡¶® ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü (‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞)</h2>
      
      {isLoading ? (
        <p className="text-gray-600 text-center py-8">‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá...</p>
      ) : error ? (
        <p className="text-red-500 text-center py-8">‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá</p>
      ) : appointments.length === 0 ? (
        <p className="text-gray-600 text-center py-8">‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§</p>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white rounded-lg shadow-md">
            <thead className="bg-gray-200">
              <tr>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700 rounded-tl-lg">‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ</th>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700">‡¶∏‡¶Æ‡¶Ø‡¶º</th>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700">‡¶∞‡ßã‡¶ó‡ßÄ‡¶∞ ‡¶®‡¶æ‡¶Æ</th>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700">‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤</th>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700">‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£</th>
                <th className="py-3 px-4 text-left text-sm font-semibold text-gray-700 rounded-tr-lg">‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡ßç‡¶∞‡¶Æ</th>
              </tr>
            </thead>
            <tbody>
              {appointments.map((appt) => (
                <tr key={appt.id} className="border-b border-gray-200 hover:bg-gray-50">
                  <td className="py-3 px-4 text-sm text-gray-800">{formatDate(appt.appointment_date)}</td>
                  <td className="py-3 px-4 text-sm text-gray-800">{formatTime(appt.appointment_time)}</td>
                  <td className="py-3 px-4 text-sm text-gray-800">{appt.patient_name}</td>
                  <td className="py-3 px-4 text-sm text-gray-800">{appt.mobile_number}</td>
                  <td className="py-3 px-4 text-sm text-gray-800">{appt.work_description}</td>
                  <td className="py-3 px-4 text-sm text-gray-800">
                    <div className="flex gap-2">
                      <button
                        onClick={() => handleEdit(appt)}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-2 py-1 rounded text-xs font-medium"
                        title="‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ"
                      >
                        ‚úèÔ∏è Edit
                      </button>
                      <button
                        onClick={() => handleDelete(appt.id)}
                        className="bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-xs font-medium"
                        title="‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®"
                      >
                        üóëÔ∏è Delete
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      <p className="text-gray-600 text-sm mt-4 text-center">
        ‡¶ö‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶ï‡¶æ‡¶≤ ‡ßß‡ß¶‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¶‡ßÅ‡¶™‡ßÅ‡¶∞ ‡ßß‡¶ü‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶ï‡¶æ‡¶≤ ‡ß´‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‡¶æ‡¶§ ‡ßØ‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶ñ‡ßã‡¶≤‡¶æ‡•§ ‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡•§
      </p>

      {/* Edit Modal - Only for Updates */}
      <Modal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        title="‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶∏‡¶Æ‡ßç‡¶™‡¶æ‡¶¶‡¶®‡¶æ"
      >
        <AppointmentForm
          appointment={editingAppointment}
          onSubmit={handleFormSubmit}
          onCancel={handleCloseModal}
          isLoading={isUpdating}
        />
      </Modal>
    </div>
  );
} 